// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// DeadLetterMessage is an object representing the database table.
type DeadLetterMessage struct {
	ID                string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	OriginalMessageID string      `boil:"original_message_id" json:"original_message_id" toml:"original_message_id" yaml:"original_message_id"`
	TenantID          string      `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	Payload           types.JSON  `boil:"payload" json:"payload" toml:"payload" yaml:"payload"`
	FailureReason     string      `boil:"failure_reason" json:"failure_reason" toml:"failure_reason" yaml:"failure_reason"`
	RetryCount        int         `boil:"retry_count" json:"retry_count" toml:"retry_count" yaml:"retry_count"`
	LastError         null.String `boil:"last_error" json:"last_error,omitempty" toml:"last_error" yaml:"last_error,omitempty"`
	CreatedAt         null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *deadLetterMessageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deadLetterMessageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeadLetterMessageColumns = struct {
	ID                string
	OriginalMessageID string
	TenantID          string
	Payload           string
	FailureReason     string
	RetryCount        string
	LastError         string
	CreatedAt         string
}{
	ID:                "id",
	OriginalMessageID: "original_message_id",
	TenantID:          "tenant_id",
	Payload:           "payload",
	FailureReason:     "failure_reason",
	RetryCount:        "retry_count",
	LastError:         "last_error",
	CreatedAt:         "created_at",
}

var DeadLetterMessageTableColumns = struct {
	ID                string
	OriginalMessageID string
	TenantID          string
	Payload           string
	FailureReason     string
	RetryCount        string
	LastError         string
	CreatedAt         string
}{
	ID:                "dead_letter_messages.id",
	OriginalMessageID: "dead_letter_messages.original_message_id",
	TenantID:          "dead_letter_messages.tenant_id",
	Payload:           "dead_letter_messages.payload",
	FailureReason:     "dead_letter_messages.failure_reason",
	RetryCount:        "dead_letter_messages.retry_count",
	LastError:         "dead_letter_messages.last_error",
	CreatedAt:         "dead_letter_messages.created_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DeadLetterMessageWhere = struct {
	ID                whereHelperstring
	OriginalMessageID whereHelperstring
	TenantID          whereHelperstring
	Payload           whereHelpertypes_JSON
	FailureReason     whereHelperstring
	RetryCount        whereHelperint
	LastError         whereHelpernull_String
	CreatedAt         whereHelpernull_Time
}{
	ID:                whereHelperstring{field: "\"dead_letter_messages\".\"id\""},
	OriginalMessageID: whereHelperstring{field: "\"dead_letter_messages\".\"original_message_id\""},
	TenantID:          whereHelperstring{field: "\"dead_letter_messages\".\"tenant_id\""},
	Payload:           whereHelpertypes_JSON{field: "\"dead_letter_messages\".\"payload\""},
	FailureReason:     whereHelperstring{field: "\"dead_letter_messages\".\"failure_reason\""},
	RetryCount:        whereHelperint{field: "\"dead_letter_messages\".\"retry_count\""},
	LastError:         whereHelpernull_String{field: "\"dead_letter_messages\".\"last_error\""},
	CreatedAt:         whereHelpernull_Time{field: "\"dead_letter_messages\".\"created_at\""},
}

// DeadLetterMessageRels is where relationship names are stored.
var DeadLetterMessageRels = struct {
	Tenant string
}{
	Tenant: "Tenant",
}

// deadLetterMessageR is where relationships are stored.
type deadLetterMessageR struct {
	Tenant *Tenant `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
}

// NewStruct creates a new relationship struct
func (*deadLetterMessageR) NewStruct() *deadLetterMessageR {
	return &deadLetterMessageR{}
}

func (o *DeadLetterMessage) GetTenant() *Tenant {
	if o == nil {
		return nil
	}

	return o.R.GetTenant()
}

func (r *deadLetterMessageR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}

	return r.Tenant
}

// deadLetterMessageL is where Load methods for each relationship are stored.
type deadLetterMessageL struct{}

var (
	deadLetterMessageAllColumns            = []string{"id", "original_message_id", "tenant_id", "payload", "failure_reason", "retry_count", "last_error", "created_at"}
	deadLetterMessageColumnsWithoutDefault = []string{"original_message_id", "tenant_id", "payload", "failure_reason", "retry_count"}
	deadLetterMessageColumnsWithDefault    = []string{"id", "last_error", "created_at"}
	deadLetterMessagePrimaryKeyColumns     = []string{"id"}
	deadLetterMessageGeneratedColumns      = []string{}
)

type (
	// DeadLetterMessageSlice is an alias for a slice of pointers to DeadLetterMessage.
	// This should almost always be used instead of []DeadLetterMessage.
	DeadLetterMessageSlice []*DeadLetterMessage
	// DeadLetterMessageHook is the signature for custom DeadLetterMessage hook methods
	DeadLetterMessageHook func(context.Context, boil.ContextExecutor, *DeadLetterMessage) error

	deadLetterMessageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deadLetterMessageType                 = reflect.TypeOf(&DeadLetterMessage{})
	deadLetterMessageMapping              = queries.MakeStructMapping(deadLetterMessageType)
	deadLetterMessagePrimaryKeyMapping, _ = queries.BindMapping(deadLetterMessageType, deadLetterMessageMapping, deadLetterMessagePrimaryKeyColumns)
	deadLetterMessageInsertCacheMut       sync.RWMutex
	deadLetterMessageInsertCache          = make(map[string]insertCache)
	deadLetterMessageUpdateCacheMut       sync.RWMutex
	deadLetterMessageUpdateCache          = make(map[string]updateCache)
	deadLetterMessageUpsertCacheMut       sync.RWMutex
	deadLetterMessageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var deadLetterMessageAfterSelectMu sync.Mutex
var deadLetterMessageAfterSelectHooks []DeadLetterMessageHook

var deadLetterMessageBeforeInsertMu sync.Mutex
var deadLetterMessageBeforeInsertHooks []DeadLetterMessageHook
var deadLetterMessageAfterInsertMu sync.Mutex
var deadLetterMessageAfterInsertHooks []DeadLetterMessageHook

var deadLetterMessageBeforeUpdateMu sync.Mutex
var deadLetterMessageBeforeUpdateHooks []DeadLetterMessageHook
var deadLetterMessageAfterUpdateMu sync.Mutex
var deadLetterMessageAfterUpdateHooks []DeadLetterMessageHook

var deadLetterMessageBeforeDeleteMu sync.Mutex
var deadLetterMessageBeforeDeleteHooks []DeadLetterMessageHook
var deadLetterMessageAfterDeleteMu sync.Mutex
var deadLetterMessageAfterDeleteHooks []DeadLetterMessageHook

var deadLetterMessageBeforeUpsertMu sync.Mutex
var deadLetterMessageBeforeUpsertHooks []DeadLetterMessageHook
var deadLetterMessageAfterUpsertMu sync.Mutex
var deadLetterMessageAfterUpsertHooks []DeadLetterMessageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeadLetterMessage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deadLetterMessageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeadLetterMessage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deadLetterMessageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeadLetterMessage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deadLetterMessageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeadLetterMessage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deadLetterMessageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeadLetterMessage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deadLetterMessageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeadLetterMessage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deadLetterMessageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeadLetterMessage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deadLetterMessageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeadLetterMessage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deadLetterMessageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeadLetterMessage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deadLetterMessageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeadLetterMessageHook registers your hook function for all future operations.
func AddDeadLetterMessageHook(hookPoint boil.HookPoint, deadLetterMessageHook DeadLetterMessageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		deadLetterMessageAfterSelectMu.Lock()
		deadLetterMessageAfterSelectHooks = append(deadLetterMessageAfterSelectHooks, deadLetterMessageHook)
		deadLetterMessageAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		deadLetterMessageBeforeInsertMu.Lock()
		deadLetterMessageBeforeInsertHooks = append(deadLetterMessageBeforeInsertHooks, deadLetterMessageHook)
		deadLetterMessageBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		deadLetterMessageAfterInsertMu.Lock()
		deadLetterMessageAfterInsertHooks = append(deadLetterMessageAfterInsertHooks, deadLetterMessageHook)
		deadLetterMessageAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		deadLetterMessageBeforeUpdateMu.Lock()
		deadLetterMessageBeforeUpdateHooks = append(deadLetterMessageBeforeUpdateHooks, deadLetterMessageHook)
		deadLetterMessageBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		deadLetterMessageAfterUpdateMu.Lock()
		deadLetterMessageAfterUpdateHooks = append(deadLetterMessageAfterUpdateHooks, deadLetterMessageHook)
		deadLetterMessageAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		deadLetterMessageBeforeDeleteMu.Lock()
		deadLetterMessageBeforeDeleteHooks = append(deadLetterMessageBeforeDeleteHooks, deadLetterMessageHook)
		deadLetterMessageBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		deadLetterMessageAfterDeleteMu.Lock()
		deadLetterMessageAfterDeleteHooks = append(deadLetterMessageAfterDeleteHooks, deadLetterMessageHook)
		deadLetterMessageAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		deadLetterMessageBeforeUpsertMu.Lock()
		deadLetterMessageBeforeUpsertHooks = append(deadLetterMessageBeforeUpsertHooks, deadLetterMessageHook)
		deadLetterMessageBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		deadLetterMessageAfterUpsertMu.Lock()
		deadLetterMessageAfterUpsertHooks = append(deadLetterMessageAfterUpsertHooks, deadLetterMessageHook)
		deadLetterMessageAfterUpsertMu.Unlock()
	}
}

// One returns a single deadLetterMessage record from the query.
func (q deadLetterMessageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeadLetterMessage, error) {
	o := &DeadLetterMessage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dead_letter_messages")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DeadLetterMessage records from the query.
func (q deadLetterMessageQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeadLetterMessageSlice, error) {
	var o []*DeadLetterMessage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DeadLetterMessage slice")
	}

	if len(deadLetterMessageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DeadLetterMessage records in the query.
func (q deadLetterMessageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dead_letter_messages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deadLetterMessageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dead_letter_messages exists")
	}

	return count > 0, nil
}

// Tenant pointed to by the foreign key.
func (o *DeadLetterMessage) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deadLetterMessageL) LoadTenant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeadLetterMessage interface{}, mods queries.Applicator) error {
	var slice []*DeadLetterMessage
	var object *DeadLetterMessage

	if singular {
		var ok bool
		object, ok = maybeDeadLetterMessage.(*DeadLetterMessage)
		if !ok {
			object = new(DeadLetterMessage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeadLetterMessage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeadLetterMessage))
			}
		}
	} else {
		s, ok := maybeDeadLetterMessage.(*[]*DeadLetterMessage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeadLetterMessage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeadLetterMessage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &deadLetterMessageR{}
		}
		args[object.TenantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deadLetterMessageR{}
			}

			args[obj.TenantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.DeadLetterMessages = append(foreign.R.DeadLetterMessages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.DeadLetterMessages = append(foreign.R.DeadLetterMessages, local)
				break
			}
		}
	}

	return nil
}

// SetTenant of the deadLetterMessage to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.DeadLetterMessages.
func (o *DeadLetterMessage) SetTenant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"dead_letter_messages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, deadLetterMessagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID
	if o.R == nil {
		o.R = &deadLetterMessageR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			DeadLetterMessages: DeadLetterMessageSlice{o},
		}
	} else {
		related.R.DeadLetterMessages = append(related.R.DeadLetterMessages, o)
	}

	return nil
}

// DeadLetterMessages retrieves all the records using an executor.
func DeadLetterMessages(mods ...qm.QueryMod) deadLetterMessageQuery {
	mods = append(mods, qm.From("\"dead_letter_messages\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"dead_letter_messages\".*"})
	}

	return deadLetterMessageQuery{q}
}

// FindDeadLetterMessage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeadLetterMessage(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*DeadLetterMessage, error) {
	deadLetterMessageObj := &DeadLetterMessage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dead_letter_messages\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, deadLetterMessageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dead_letter_messages")
	}

	if err = deadLetterMessageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return deadLetterMessageObj, err
	}

	return deadLetterMessageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeadLetterMessage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dead_letter_messages provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deadLetterMessageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deadLetterMessageInsertCacheMut.RLock()
	cache, cached := deadLetterMessageInsertCache[key]
	deadLetterMessageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deadLetterMessageAllColumns,
			deadLetterMessageColumnsWithDefault,
			deadLetterMessageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deadLetterMessageType, deadLetterMessageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deadLetterMessageType, deadLetterMessageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dead_letter_messages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dead_letter_messages\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dead_letter_messages")
	}

	if !cached {
		deadLetterMessageInsertCacheMut.Lock()
		deadLetterMessageInsertCache[key] = cache
		deadLetterMessageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DeadLetterMessage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeadLetterMessage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	deadLetterMessageUpdateCacheMut.RLock()
	cache, cached := deadLetterMessageUpdateCache[key]
	deadLetterMessageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deadLetterMessageAllColumns,
			deadLetterMessagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dead_letter_messages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dead_letter_messages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, deadLetterMessagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deadLetterMessageType, deadLetterMessageMapping, append(wl, deadLetterMessagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dead_letter_messages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dead_letter_messages")
	}

	if !cached {
		deadLetterMessageUpdateCacheMut.Lock()
		deadLetterMessageUpdateCache[key] = cache
		deadLetterMessageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q deadLetterMessageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dead_letter_messages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dead_letter_messages")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeadLetterMessageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deadLetterMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dead_letter_messages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, deadLetterMessagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in deadLetterMessage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all deadLetterMessage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeadLetterMessage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no dead_letter_messages provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deadLetterMessageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deadLetterMessageUpsertCacheMut.RLock()
	cache, cached := deadLetterMessageUpsertCache[key]
	deadLetterMessageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			deadLetterMessageAllColumns,
			deadLetterMessageColumnsWithDefault,
			deadLetterMessageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deadLetterMessageAllColumns,
			deadLetterMessagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert dead_letter_messages, could not build update column list")
		}

		ret := strmangle.SetComplement(deadLetterMessageAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(deadLetterMessagePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert dead_letter_messages, could not build conflict column list")
			}

			conflict = make([]string, len(deadLetterMessagePrimaryKeyColumns))
			copy(conflict, deadLetterMessagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"dead_letter_messages\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(deadLetterMessageType, deadLetterMessageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deadLetterMessageType, deadLetterMessageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert dead_letter_messages")
	}

	if !cached {
		deadLetterMessageUpsertCacheMut.Lock()
		deadLetterMessageUpsertCache[key] = cache
		deadLetterMessageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DeadLetterMessage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeadLetterMessage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DeadLetterMessage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deadLetterMessagePrimaryKeyMapping)
	sql := "DELETE FROM \"dead_letter_messages\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dead_letter_messages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dead_letter_messages")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deadLetterMessageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no deadLetterMessageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dead_letter_messages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dead_letter_messages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeadLetterMessageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(deadLetterMessageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deadLetterMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dead_letter_messages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deadLetterMessagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from deadLetterMessage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dead_letter_messages")
	}

	if len(deadLetterMessageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeadLetterMessage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeadLetterMessage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeadLetterMessageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeadLetterMessageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deadLetterMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dead_letter_messages\".* FROM \"dead_letter_messages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, deadLetterMessagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DeadLetterMessageSlice")
	}

	*o = slice

	return nil
}

// DeadLetterMessageExists checks if the DeadLetterMessage row exists.
func DeadLetterMessageExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dead_letter_messages\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dead_letter_messages exists")
	}

	return exists, nil
}

// Exists checks if the DeadLetterMessage row exists.
func (o *DeadLetterMessage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeadLetterMessageExists(ctx, exec, o.ID)
}
