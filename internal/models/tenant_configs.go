// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// TenantConfig is an object representing the database table.
type TenantConfig struct {
	ID          string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	TenantID    string     `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	ConfigKey   string     `boil:"config_key" json:"config_key" toml:"config_key" yaml:"config_key"`
	ConfigValue types.JSON `boil:"config_value" json:"config_value" toml:"config_value" yaml:"config_value"`
	Version     null.Int   `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`
	IsActive    null.Bool  `boil:"is_active" json:"is_active,omitempty" toml:"is_active" yaml:"is_active,omitempty"`
	CreatedAt   null.Time  `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time  `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *tenantConfigR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tenantConfigL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TenantConfigColumns = struct {
	ID          string
	TenantID    string
	ConfigKey   string
	ConfigValue string
	Version     string
	IsActive    string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	TenantID:    "tenant_id",
	ConfigKey:   "config_key",
	ConfigValue: "config_value",
	Version:     "version",
	IsActive:    "is_active",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var TenantConfigTableColumns = struct {
	ID          string
	TenantID    string
	ConfigKey   string
	ConfigValue string
	Version     string
	IsActive    string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "tenant_configs.id",
	TenantID:    "tenant_configs.tenant_id",
	ConfigKey:   "tenant_configs.config_key",
	ConfigValue: "tenant_configs.config_value",
	Version:     "tenant_configs.version",
	IsActive:    "tenant_configs.is_active",
	CreatedAt:   "tenant_configs.created_at",
	UpdatedAt:   "tenant_configs.updated_at",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var TenantConfigWhere = struct {
	ID          whereHelperstring
	TenantID    whereHelperstring
	ConfigKey   whereHelperstring
	ConfigValue whereHelpertypes_JSON
	Version     whereHelpernull_Int
	IsActive    whereHelpernull_Bool
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
}{
	ID:          whereHelperstring{field: "\"tenant_configs\".\"id\""},
	TenantID:    whereHelperstring{field: "\"tenant_configs\".\"tenant_id\""},
	ConfigKey:   whereHelperstring{field: "\"tenant_configs\".\"config_key\""},
	ConfigValue: whereHelpertypes_JSON{field: "\"tenant_configs\".\"config_value\""},
	Version:     whereHelpernull_Int{field: "\"tenant_configs\".\"version\""},
	IsActive:    whereHelpernull_Bool{field: "\"tenant_configs\".\"is_active\""},
	CreatedAt:   whereHelpernull_Time{field: "\"tenant_configs\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"tenant_configs\".\"updated_at\""},
}

// TenantConfigRels is where relationship names are stored.
var TenantConfigRels = struct {
	Tenant string
}{
	Tenant: "Tenant",
}

// tenantConfigR is where relationships are stored.
type tenantConfigR struct {
	Tenant *Tenant `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
}

// NewStruct creates a new relationship struct
func (*tenantConfigR) NewStruct() *tenantConfigR {
	return &tenantConfigR{}
}

func (o *TenantConfig) GetTenant() *Tenant {
	if o == nil {
		return nil
	}

	return o.R.GetTenant()
}

func (r *tenantConfigR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}

	return r.Tenant
}

// tenantConfigL is where Load methods for each relationship are stored.
type tenantConfigL struct{}

var (
	tenantConfigAllColumns            = []string{"id", "tenant_id", "config_key", "config_value", "version", "is_active", "created_at", "updated_at"}
	tenantConfigColumnsWithoutDefault = []string{"tenant_id", "config_key", "config_value"}
	tenantConfigColumnsWithDefault    = []string{"id", "version", "is_active", "created_at", "updated_at"}
	tenantConfigPrimaryKeyColumns     = []string{"id"}
	tenantConfigGeneratedColumns      = []string{}
)

type (
	// TenantConfigSlice is an alias for a slice of pointers to TenantConfig.
	// This should almost always be used instead of []TenantConfig.
	TenantConfigSlice []*TenantConfig
	// TenantConfigHook is the signature for custom TenantConfig hook methods
	TenantConfigHook func(context.Context, boil.ContextExecutor, *TenantConfig) error

	tenantConfigQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tenantConfigType                 = reflect.TypeOf(&TenantConfig{})
	tenantConfigMapping              = queries.MakeStructMapping(tenantConfigType)
	tenantConfigPrimaryKeyMapping, _ = queries.BindMapping(tenantConfigType, tenantConfigMapping, tenantConfigPrimaryKeyColumns)
	tenantConfigInsertCacheMut       sync.RWMutex
	tenantConfigInsertCache          = make(map[string]insertCache)
	tenantConfigUpdateCacheMut       sync.RWMutex
	tenantConfigUpdateCache          = make(map[string]updateCache)
	tenantConfigUpsertCacheMut       sync.RWMutex
	tenantConfigUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tenantConfigAfterSelectMu sync.Mutex
var tenantConfigAfterSelectHooks []TenantConfigHook

var tenantConfigBeforeInsertMu sync.Mutex
var tenantConfigBeforeInsertHooks []TenantConfigHook
var tenantConfigAfterInsertMu sync.Mutex
var tenantConfigAfterInsertHooks []TenantConfigHook

var tenantConfigBeforeUpdateMu sync.Mutex
var tenantConfigBeforeUpdateHooks []TenantConfigHook
var tenantConfigAfterUpdateMu sync.Mutex
var tenantConfigAfterUpdateHooks []TenantConfigHook

var tenantConfigBeforeDeleteMu sync.Mutex
var tenantConfigBeforeDeleteHooks []TenantConfigHook
var tenantConfigAfterDeleteMu sync.Mutex
var tenantConfigAfterDeleteHooks []TenantConfigHook

var tenantConfigBeforeUpsertMu sync.Mutex
var tenantConfigBeforeUpsertHooks []TenantConfigHook
var tenantConfigAfterUpsertMu sync.Mutex
var tenantConfigAfterUpsertHooks []TenantConfigHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TenantConfig) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantConfigAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TenantConfig) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantConfigBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TenantConfig) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantConfigAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TenantConfig) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantConfigBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TenantConfig) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantConfigAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TenantConfig) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantConfigBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TenantConfig) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantConfigAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TenantConfig) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantConfigBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TenantConfig) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantConfigAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTenantConfigHook registers your hook function for all future operations.
func AddTenantConfigHook(hookPoint boil.HookPoint, tenantConfigHook TenantConfigHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tenantConfigAfterSelectMu.Lock()
		tenantConfigAfterSelectHooks = append(tenantConfigAfterSelectHooks, tenantConfigHook)
		tenantConfigAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		tenantConfigBeforeInsertMu.Lock()
		tenantConfigBeforeInsertHooks = append(tenantConfigBeforeInsertHooks, tenantConfigHook)
		tenantConfigBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		tenantConfigAfterInsertMu.Lock()
		tenantConfigAfterInsertHooks = append(tenantConfigAfterInsertHooks, tenantConfigHook)
		tenantConfigAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		tenantConfigBeforeUpdateMu.Lock()
		tenantConfigBeforeUpdateHooks = append(tenantConfigBeforeUpdateHooks, tenantConfigHook)
		tenantConfigBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		tenantConfigAfterUpdateMu.Lock()
		tenantConfigAfterUpdateHooks = append(tenantConfigAfterUpdateHooks, tenantConfigHook)
		tenantConfigAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		tenantConfigBeforeDeleteMu.Lock()
		tenantConfigBeforeDeleteHooks = append(tenantConfigBeforeDeleteHooks, tenantConfigHook)
		tenantConfigBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		tenantConfigAfterDeleteMu.Lock()
		tenantConfigAfterDeleteHooks = append(tenantConfigAfterDeleteHooks, tenantConfigHook)
		tenantConfigAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		tenantConfigBeforeUpsertMu.Lock()
		tenantConfigBeforeUpsertHooks = append(tenantConfigBeforeUpsertHooks, tenantConfigHook)
		tenantConfigBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		tenantConfigAfterUpsertMu.Lock()
		tenantConfigAfterUpsertHooks = append(tenantConfigAfterUpsertHooks, tenantConfigHook)
		tenantConfigAfterUpsertMu.Unlock()
	}
}

// One returns a single tenantConfig record from the query.
func (q tenantConfigQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TenantConfig, error) {
	o := &TenantConfig{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tenant_configs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TenantConfig records from the query.
func (q tenantConfigQuery) All(ctx context.Context, exec boil.ContextExecutor) (TenantConfigSlice, error) {
	var o []*TenantConfig

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TenantConfig slice")
	}

	if len(tenantConfigAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TenantConfig records in the query.
func (q tenantConfigQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tenant_configs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tenantConfigQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tenant_configs exists")
	}

	return count > 0, nil
}

// Tenant pointed to by the foreign key.
func (o *TenantConfig) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tenantConfigL) LoadTenant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTenantConfig interface{}, mods queries.Applicator) error {
	var slice []*TenantConfig
	var object *TenantConfig

	if singular {
		var ok bool
		object, ok = maybeTenantConfig.(*TenantConfig)
		if !ok {
			object = new(TenantConfig)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenantConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenantConfig))
			}
		}
	} else {
		s, ok := maybeTenantConfig.(*[]*TenantConfig)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenantConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenantConfig))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantConfigR{}
		}
		args[object.TenantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantConfigR{}
			}

			args[obj.TenantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.TenantConfigs = append(foreign.R.TenantConfigs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.TenantConfigs = append(foreign.R.TenantConfigs, local)
				break
			}
		}
	}

	return nil
}

// SetTenant of the tenantConfig to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.TenantConfigs.
func (o *TenantConfig) SetTenant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tenant_configs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, tenantConfigPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID
	if o.R == nil {
		o.R = &tenantConfigR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			TenantConfigs: TenantConfigSlice{o},
		}
	} else {
		related.R.TenantConfigs = append(related.R.TenantConfigs, o)
	}

	return nil
}

// TenantConfigs retrieves all the records using an executor.
func TenantConfigs(mods ...qm.QueryMod) tenantConfigQuery {
	mods = append(mods, qm.From("\"tenant_configs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tenant_configs\".*"})
	}

	return tenantConfigQuery{q}
}

// FindTenantConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTenantConfig(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*TenantConfig, error) {
	tenantConfigObj := &TenantConfig{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tenant_configs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tenantConfigObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tenant_configs")
	}

	if err = tenantConfigObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tenantConfigObj, err
	}

	return tenantConfigObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TenantConfig) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tenant_configs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tenantConfigColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tenantConfigInsertCacheMut.RLock()
	cache, cached := tenantConfigInsertCache[key]
	tenantConfigInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tenantConfigAllColumns,
			tenantConfigColumnsWithDefault,
			tenantConfigColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tenantConfigType, tenantConfigMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tenantConfigType, tenantConfigMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tenant_configs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tenant_configs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tenant_configs")
	}

	if !cached {
		tenantConfigInsertCacheMut.Lock()
		tenantConfigInsertCache[key] = cache
		tenantConfigInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TenantConfig.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TenantConfig) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tenantConfigUpdateCacheMut.RLock()
	cache, cached := tenantConfigUpdateCache[key]
	tenantConfigUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tenantConfigAllColumns,
			tenantConfigPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tenant_configs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tenant_configs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tenantConfigPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tenantConfigType, tenantConfigMapping, append(wl, tenantConfigPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tenant_configs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tenant_configs")
	}

	if !cached {
		tenantConfigUpdateCacheMut.Lock()
		tenantConfigUpdateCache[key] = cache
		tenantConfigUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tenantConfigQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tenant_configs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tenant_configs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TenantConfigSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tenant_configs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tenantConfigPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tenantConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tenantConfig")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TenantConfig) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no tenant_configs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tenantConfigColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tenantConfigUpsertCacheMut.RLock()
	cache, cached := tenantConfigUpsertCache[key]
	tenantConfigUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			tenantConfigAllColumns,
			tenantConfigColumnsWithDefault,
			tenantConfigColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tenantConfigAllColumns,
			tenantConfigPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert tenant_configs, could not build update column list")
		}

		ret := strmangle.SetComplement(tenantConfigAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(tenantConfigPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert tenant_configs, could not build conflict column list")
			}

			conflict = make([]string, len(tenantConfigPrimaryKeyColumns))
			copy(conflict, tenantConfigPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tenant_configs\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(tenantConfigType, tenantConfigMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tenantConfigType, tenantConfigMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tenant_configs")
	}

	if !cached {
		tenantConfigUpsertCacheMut.Lock()
		tenantConfigUpsertCache[key] = cache
		tenantConfigUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TenantConfig record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TenantConfig) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TenantConfig provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tenantConfigPrimaryKeyMapping)
	sql := "DELETE FROM \"tenant_configs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tenant_configs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tenant_configs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tenantConfigQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tenantConfigQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tenant_configs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tenant_configs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TenantConfigSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tenantConfigBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tenant_configs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tenantConfigPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tenantConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tenant_configs")
	}

	if len(tenantConfigAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TenantConfig) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTenantConfig(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TenantConfigSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TenantConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tenant_configs\".* FROM \"tenant_configs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tenantConfigPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TenantConfigSlice")
	}

	*o = slice

	return nil
}

// TenantConfigExists checks if the TenantConfig row exists.
func TenantConfigExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tenant_configs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tenant_configs exists")
	}

	return exists, nil
}

// Exists checks if the TenantConfig row exists.
func (o *TenantConfig) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TenantConfigExists(ctx, exec, o.ID)
}

type TenantConfigRequest struct {
	Workers int `json:"workers" binding:"required,min=1,max=50"`
}
