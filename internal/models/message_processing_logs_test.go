// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMessageProcessingLogs(t *testing.T) {
	t.Parallel()

	query := MessageProcessingLogs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMessageProcessingLogsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessageProcessingLog{}
	if err = randomize.Struct(seed, o, messageProcessingLogDBTypes, true, messageProcessingLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MessageProcessingLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMessageProcessingLogsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessageProcessingLog{}
	if err = randomize.Struct(seed, o, messageProcessingLogDBTypes, true, messageProcessingLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MessageProcessingLogs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MessageProcessingLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMessageProcessingLogsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessageProcessingLog{}
	if err = randomize.Struct(seed, o, messageProcessingLogDBTypes, true, messageProcessingLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MessageProcessingLogSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MessageProcessingLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMessageProcessingLogsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessageProcessingLog{}
	if err = randomize.Struct(seed, o, messageProcessingLogDBTypes, true, messageProcessingLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MessageProcessingLogExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MessageProcessingLog exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MessageProcessingLogExists to return true, but got false.")
	}
}

func testMessageProcessingLogsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessageProcessingLog{}
	if err = randomize.Struct(seed, o, messageProcessingLogDBTypes, true, messageProcessingLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	messageProcessingLogFound, err := FindMessageProcessingLog(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if messageProcessingLogFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMessageProcessingLogsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessageProcessingLog{}
	if err = randomize.Struct(seed, o, messageProcessingLogDBTypes, true, messageProcessingLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MessageProcessingLogs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMessageProcessingLogsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessageProcessingLog{}
	if err = randomize.Struct(seed, o, messageProcessingLogDBTypes, true, messageProcessingLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MessageProcessingLogs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMessageProcessingLogsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	messageProcessingLogOne := &MessageProcessingLog{}
	messageProcessingLogTwo := &MessageProcessingLog{}
	if err = randomize.Struct(seed, messageProcessingLogOne, messageProcessingLogDBTypes, false, messageProcessingLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}
	if err = randomize.Struct(seed, messageProcessingLogTwo, messageProcessingLogDBTypes, false, messageProcessingLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = messageProcessingLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = messageProcessingLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MessageProcessingLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMessageProcessingLogsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	messageProcessingLogOne := &MessageProcessingLog{}
	messageProcessingLogTwo := &MessageProcessingLog{}
	if err = randomize.Struct(seed, messageProcessingLogOne, messageProcessingLogDBTypes, false, messageProcessingLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}
	if err = randomize.Struct(seed, messageProcessingLogTwo, messageProcessingLogDBTypes, false, messageProcessingLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = messageProcessingLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = messageProcessingLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MessageProcessingLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func messageProcessingLogBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MessageProcessingLog) error {
	*o = MessageProcessingLog{}
	return nil
}

func messageProcessingLogAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MessageProcessingLog) error {
	*o = MessageProcessingLog{}
	return nil
}

func messageProcessingLogAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MessageProcessingLog) error {
	*o = MessageProcessingLog{}
	return nil
}

func messageProcessingLogBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MessageProcessingLog) error {
	*o = MessageProcessingLog{}
	return nil
}

func messageProcessingLogAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MessageProcessingLog) error {
	*o = MessageProcessingLog{}
	return nil
}

func messageProcessingLogBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MessageProcessingLog) error {
	*o = MessageProcessingLog{}
	return nil
}

func messageProcessingLogAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MessageProcessingLog) error {
	*o = MessageProcessingLog{}
	return nil
}

func messageProcessingLogBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MessageProcessingLog) error {
	*o = MessageProcessingLog{}
	return nil
}

func messageProcessingLogAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MessageProcessingLog) error {
	*o = MessageProcessingLog{}
	return nil
}

func testMessageProcessingLogsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MessageProcessingLog{}
	o := &MessageProcessingLog{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, messageProcessingLogDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog object: %s", err)
	}

	AddMessageProcessingLogHook(boil.BeforeInsertHook, messageProcessingLogBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	messageProcessingLogBeforeInsertHooks = []MessageProcessingLogHook{}

	AddMessageProcessingLogHook(boil.AfterInsertHook, messageProcessingLogAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	messageProcessingLogAfterInsertHooks = []MessageProcessingLogHook{}

	AddMessageProcessingLogHook(boil.AfterSelectHook, messageProcessingLogAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	messageProcessingLogAfterSelectHooks = []MessageProcessingLogHook{}

	AddMessageProcessingLogHook(boil.BeforeUpdateHook, messageProcessingLogBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	messageProcessingLogBeforeUpdateHooks = []MessageProcessingLogHook{}

	AddMessageProcessingLogHook(boil.AfterUpdateHook, messageProcessingLogAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	messageProcessingLogAfterUpdateHooks = []MessageProcessingLogHook{}

	AddMessageProcessingLogHook(boil.BeforeDeleteHook, messageProcessingLogBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	messageProcessingLogBeforeDeleteHooks = []MessageProcessingLogHook{}

	AddMessageProcessingLogHook(boil.AfterDeleteHook, messageProcessingLogAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	messageProcessingLogAfterDeleteHooks = []MessageProcessingLogHook{}

	AddMessageProcessingLogHook(boil.BeforeUpsertHook, messageProcessingLogBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	messageProcessingLogBeforeUpsertHooks = []MessageProcessingLogHook{}

	AddMessageProcessingLogHook(boil.AfterUpsertHook, messageProcessingLogAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	messageProcessingLogAfterUpsertHooks = []MessageProcessingLogHook{}
}

func testMessageProcessingLogsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessageProcessingLog{}
	if err = randomize.Struct(seed, o, messageProcessingLogDBTypes, true, messageProcessingLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MessageProcessingLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMessageProcessingLogsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessageProcessingLog{}
	if err = randomize.Struct(seed, o, messageProcessingLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(messageProcessingLogPrimaryKeyColumns, messageProcessingLogColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := MessageProcessingLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMessageProcessingLogToOneTenantUsingTenant(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MessageProcessingLog
	var foreign Tenant

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, messageProcessingLogDBTypes, false, messageProcessingLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tenantDBTypes, false, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TenantID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Tenant().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddTenantHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Tenant) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := MessageProcessingLogSlice{&local}
	if err = local.L.LoadTenant(ctx, tx, false, (*[]*MessageProcessingLog)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tenant == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Tenant = nil
	if err = local.L.LoadTenant(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tenant == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testMessageProcessingLogToOneSetOpTenantUsingTenant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MessageProcessingLog
	var b, c Tenant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, messageProcessingLogDBTypes, false, strmangle.SetComplement(messageProcessingLogPrimaryKeyColumns, messageProcessingLogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tenant{&b, &c} {
		err = a.SetTenant(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Tenant != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MessageProcessingLogs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TenantID != x.ID {
			t.Error("foreign key was wrong value", a.TenantID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TenantID))
		reflect.Indirect(reflect.ValueOf(&a.TenantID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TenantID != x.ID {
			t.Error("foreign key was wrong value", a.TenantID, x.ID)
		}
	}
}

func testMessageProcessingLogsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessageProcessingLog{}
	if err = randomize.Struct(seed, o, messageProcessingLogDBTypes, true, messageProcessingLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMessageProcessingLogsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessageProcessingLog{}
	if err = randomize.Struct(seed, o, messageProcessingLogDBTypes, true, messageProcessingLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MessageProcessingLogSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMessageProcessingLogsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MessageProcessingLog{}
	if err = randomize.Struct(seed, o, messageProcessingLogDBTypes, true, messageProcessingLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MessageProcessingLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	messageProcessingLogDBTypes = map[string]string{`ID`: `uuid`, `MessageID`: `uuid`, `TenantID`: `uuid`, `WorkerID`: `character varying`, `Status`: `character varying`, `ErrorMessage`: `text`, `ProcessingDurationMS`: `integer`, `CreatedAt`: `timestamp with time zone`}
	_                           = bytes.MinRead
)

func testMessageProcessingLogsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(messageProcessingLogPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(messageProcessingLogAllColumns) == len(messageProcessingLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MessageProcessingLog{}
	if err = randomize.Struct(seed, o, messageProcessingLogDBTypes, true, messageProcessingLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MessageProcessingLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, messageProcessingLogDBTypes, true, messageProcessingLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMessageProcessingLogsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(messageProcessingLogAllColumns) == len(messageProcessingLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MessageProcessingLog{}
	if err = randomize.Struct(seed, o, messageProcessingLogDBTypes, true, messageProcessingLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MessageProcessingLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, messageProcessingLogDBTypes, true, messageProcessingLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(messageProcessingLogAllColumns, messageProcessingLogPrimaryKeyColumns) {
		fields = messageProcessingLogAllColumns
	} else {
		fields = strmangle.SetComplement(
			messageProcessingLogAllColumns,
			messageProcessingLogPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MessageProcessingLogSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMessageProcessingLogsUpsert(t *testing.T) {
	t.Parallel()

	if len(messageProcessingLogAllColumns) == len(messageProcessingLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MessageProcessingLog{}
	if err = randomize.Struct(seed, &o, messageProcessingLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MessageProcessingLog: %s", err)
	}

	count, err := MessageProcessingLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, messageProcessingLogDBTypes, false, messageProcessingLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MessageProcessingLog struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MessageProcessingLog: %s", err)
	}

	count, err = MessageProcessingLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
