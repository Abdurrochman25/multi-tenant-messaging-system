// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// MessageProcessingLog is an object representing the database table.
type MessageProcessingLog struct {
	ID                   string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	MessageID            string      `boil:"message_id" json:"message_id" toml:"message_id" yaml:"message_id"`
	TenantID             string      `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	WorkerID             null.String `boil:"worker_id" json:"worker_id,omitempty" toml:"worker_id" yaml:"worker_id,omitempty"`
	Status               string      `boil:"status" json:"status" toml:"status" yaml:"status"`
	ErrorMessage         null.String `boil:"error_message" json:"error_message,omitempty" toml:"error_message" yaml:"error_message,omitempty"`
	ProcessingDurationMS null.Int    `boil:"processing_duration_ms" json:"processing_duration_ms,omitempty" toml:"processing_duration_ms" yaml:"processing_duration_ms,omitempty"`
	CreatedAt            null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *messageProcessingLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L messageProcessingLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MessageProcessingLogColumns = struct {
	ID                   string
	MessageID            string
	TenantID             string
	WorkerID             string
	Status               string
	ErrorMessage         string
	ProcessingDurationMS string
	CreatedAt            string
}{
	ID:                   "id",
	MessageID:            "message_id",
	TenantID:             "tenant_id",
	WorkerID:             "worker_id",
	Status:               "status",
	ErrorMessage:         "error_message",
	ProcessingDurationMS: "processing_duration_ms",
	CreatedAt:            "created_at",
}

var MessageProcessingLogTableColumns = struct {
	ID                   string
	MessageID            string
	TenantID             string
	WorkerID             string
	Status               string
	ErrorMessage         string
	ProcessingDurationMS string
	CreatedAt            string
}{
	ID:                   "message_processing_logs.id",
	MessageID:            "message_processing_logs.message_id",
	TenantID:             "message_processing_logs.tenant_id",
	WorkerID:             "message_processing_logs.worker_id",
	Status:               "message_processing_logs.status",
	ErrorMessage:         "message_processing_logs.error_message",
	ProcessingDurationMS: "message_processing_logs.processing_duration_ms",
	CreatedAt:            "message_processing_logs.created_at",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var MessageProcessingLogWhere = struct {
	ID                   whereHelperstring
	MessageID            whereHelperstring
	TenantID             whereHelperstring
	WorkerID             whereHelpernull_String
	Status               whereHelperstring
	ErrorMessage         whereHelpernull_String
	ProcessingDurationMS whereHelpernull_Int
	CreatedAt            whereHelpernull_Time
}{
	ID:                   whereHelperstring{field: "\"message_processing_logs\".\"id\""},
	MessageID:            whereHelperstring{field: "\"message_processing_logs\".\"message_id\""},
	TenantID:             whereHelperstring{field: "\"message_processing_logs\".\"tenant_id\""},
	WorkerID:             whereHelpernull_String{field: "\"message_processing_logs\".\"worker_id\""},
	Status:               whereHelperstring{field: "\"message_processing_logs\".\"status\""},
	ErrorMessage:         whereHelpernull_String{field: "\"message_processing_logs\".\"error_message\""},
	ProcessingDurationMS: whereHelpernull_Int{field: "\"message_processing_logs\".\"processing_duration_ms\""},
	CreatedAt:            whereHelpernull_Time{field: "\"message_processing_logs\".\"created_at\""},
}

// MessageProcessingLogRels is where relationship names are stored.
var MessageProcessingLogRels = struct {
	Tenant string
}{
	Tenant: "Tenant",
}

// messageProcessingLogR is where relationships are stored.
type messageProcessingLogR struct {
	Tenant *Tenant `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
}

// NewStruct creates a new relationship struct
func (*messageProcessingLogR) NewStruct() *messageProcessingLogR {
	return &messageProcessingLogR{}
}

func (o *MessageProcessingLog) GetTenant() *Tenant {
	if o == nil {
		return nil
	}

	return o.R.GetTenant()
}

func (r *messageProcessingLogR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}

	return r.Tenant
}

// messageProcessingLogL is where Load methods for each relationship are stored.
type messageProcessingLogL struct{}

var (
	messageProcessingLogAllColumns            = []string{"id", "message_id", "tenant_id", "worker_id", "status", "error_message", "processing_duration_ms", "created_at"}
	messageProcessingLogColumnsWithoutDefault = []string{"message_id", "tenant_id", "status"}
	messageProcessingLogColumnsWithDefault    = []string{"id", "worker_id", "error_message", "processing_duration_ms", "created_at"}
	messageProcessingLogPrimaryKeyColumns     = []string{"id"}
	messageProcessingLogGeneratedColumns      = []string{}
)

type (
	// MessageProcessingLogSlice is an alias for a slice of pointers to MessageProcessingLog.
	// This should almost always be used instead of []MessageProcessingLog.
	MessageProcessingLogSlice []*MessageProcessingLog
	// MessageProcessingLogHook is the signature for custom MessageProcessingLog hook methods
	MessageProcessingLogHook func(context.Context, boil.ContextExecutor, *MessageProcessingLog) error

	messageProcessingLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	messageProcessingLogType                 = reflect.TypeOf(&MessageProcessingLog{})
	messageProcessingLogMapping              = queries.MakeStructMapping(messageProcessingLogType)
	messageProcessingLogPrimaryKeyMapping, _ = queries.BindMapping(messageProcessingLogType, messageProcessingLogMapping, messageProcessingLogPrimaryKeyColumns)
	messageProcessingLogInsertCacheMut       sync.RWMutex
	messageProcessingLogInsertCache          = make(map[string]insertCache)
	messageProcessingLogUpdateCacheMut       sync.RWMutex
	messageProcessingLogUpdateCache          = make(map[string]updateCache)
	messageProcessingLogUpsertCacheMut       sync.RWMutex
	messageProcessingLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var messageProcessingLogAfterSelectMu sync.Mutex
var messageProcessingLogAfterSelectHooks []MessageProcessingLogHook

var messageProcessingLogBeforeInsertMu sync.Mutex
var messageProcessingLogBeforeInsertHooks []MessageProcessingLogHook
var messageProcessingLogAfterInsertMu sync.Mutex
var messageProcessingLogAfterInsertHooks []MessageProcessingLogHook

var messageProcessingLogBeforeUpdateMu sync.Mutex
var messageProcessingLogBeforeUpdateHooks []MessageProcessingLogHook
var messageProcessingLogAfterUpdateMu sync.Mutex
var messageProcessingLogAfterUpdateHooks []MessageProcessingLogHook

var messageProcessingLogBeforeDeleteMu sync.Mutex
var messageProcessingLogBeforeDeleteHooks []MessageProcessingLogHook
var messageProcessingLogAfterDeleteMu sync.Mutex
var messageProcessingLogAfterDeleteHooks []MessageProcessingLogHook

var messageProcessingLogBeforeUpsertMu sync.Mutex
var messageProcessingLogBeforeUpsertHooks []MessageProcessingLogHook
var messageProcessingLogAfterUpsertMu sync.Mutex
var messageProcessingLogAfterUpsertHooks []MessageProcessingLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MessageProcessingLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range messageProcessingLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MessageProcessingLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range messageProcessingLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MessageProcessingLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range messageProcessingLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MessageProcessingLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range messageProcessingLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MessageProcessingLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range messageProcessingLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MessageProcessingLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range messageProcessingLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MessageProcessingLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range messageProcessingLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MessageProcessingLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range messageProcessingLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MessageProcessingLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range messageProcessingLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMessageProcessingLogHook registers your hook function for all future operations.
func AddMessageProcessingLogHook(hookPoint boil.HookPoint, messageProcessingLogHook MessageProcessingLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		messageProcessingLogAfterSelectMu.Lock()
		messageProcessingLogAfterSelectHooks = append(messageProcessingLogAfterSelectHooks, messageProcessingLogHook)
		messageProcessingLogAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		messageProcessingLogBeforeInsertMu.Lock()
		messageProcessingLogBeforeInsertHooks = append(messageProcessingLogBeforeInsertHooks, messageProcessingLogHook)
		messageProcessingLogBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		messageProcessingLogAfterInsertMu.Lock()
		messageProcessingLogAfterInsertHooks = append(messageProcessingLogAfterInsertHooks, messageProcessingLogHook)
		messageProcessingLogAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		messageProcessingLogBeforeUpdateMu.Lock()
		messageProcessingLogBeforeUpdateHooks = append(messageProcessingLogBeforeUpdateHooks, messageProcessingLogHook)
		messageProcessingLogBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		messageProcessingLogAfterUpdateMu.Lock()
		messageProcessingLogAfterUpdateHooks = append(messageProcessingLogAfterUpdateHooks, messageProcessingLogHook)
		messageProcessingLogAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		messageProcessingLogBeforeDeleteMu.Lock()
		messageProcessingLogBeforeDeleteHooks = append(messageProcessingLogBeforeDeleteHooks, messageProcessingLogHook)
		messageProcessingLogBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		messageProcessingLogAfterDeleteMu.Lock()
		messageProcessingLogAfterDeleteHooks = append(messageProcessingLogAfterDeleteHooks, messageProcessingLogHook)
		messageProcessingLogAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		messageProcessingLogBeforeUpsertMu.Lock()
		messageProcessingLogBeforeUpsertHooks = append(messageProcessingLogBeforeUpsertHooks, messageProcessingLogHook)
		messageProcessingLogBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		messageProcessingLogAfterUpsertMu.Lock()
		messageProcessingLogAfterUpsertHooks = append(messageProcessingLogAfterUpsertHooks, messageProcessingLogHook)
		messageProcessingLogAfterUpsertMu.Unlock()
	}
}

// One returns a single messageProcessingLog record from the query.
func (q messageProcessingLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MessageProcessingLog, error) {
	o := &MessageProcessingLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for message_processing_logs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MessageProcessingLog records from the query.
func (q messageProcessingLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (MessageProcessingLogSlice, error) {
	var o []*MessageProcessingLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MessageProcessingLog slice")
	}

	if len(messageProcessingLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MessageProcessingLog records in the query.
func (q messageProcessingLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count message_processing_logs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q messageProcessingLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if message_processing_logs exists")
	}

	return count > 0, nil
}

// Tenant pointed to by the foreign key.
func (o *MessageProcessingLog) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (messageProcessingLogL) LoadTenant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMessageProcessingLog interface{}, mods queries.Applicator) error {
	var slice []*MessageProcessingLog
	var object *MessageProcessingLog

	if singular {
		var ok bool
		object, ok = maybeMessageProcessingLog.(*MessageProcessingLog)
		if !ok {
			object = new(MessageProcessingLog)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMessageProcessingLog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMessageProcessingLog))
			}
		}
	} else {
		s, ok := maybeMessageProcessingLog.(*[]*MessageProcessingLog)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMessageProcessingLog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMessageProcessingLog))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &messageProcessingLogR{}
		}
		args[object.TenantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &messageProcessingLogR{}
			}

			args[obj.TenantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.MessageProcessingLogs = append(foreign.R.MessageProcessingLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.MessageProcessingLogs = append(foreign.R.MessageProcessingLogs, local)
				break
			}
		}
	}

	return nil
}

// SetTenant of the messageProcessingLog to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.MessageProcessingLogs.
func (o *MessageProcessingLog) SetTenant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"message_processing_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, messageProcessingLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID
	if o.R == nil {
		o.R = &messageProcessingLogR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			MessageProcessingLogs: MessageProcessingLogSlice{o},
		}
	} else {
		related.R.MessageProcessingLogs = append(related.R.MessageProcessingLogs, o)
	}

	return nil
}

// MessageProcessingLogs retrieves all the records using an executor.
func MessageProcessingLogs(mods ...qm.QueryMod) messageProcessingLogQuery {
	mods = append(mods, qm.From("\"message_processing_logs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"message_processing_logs\".*"})
	}

	return messageProcessingLogQuery{q}
}

// FindMessageProcessingLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMessageProcessingLog(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*MessageProcessingLog, error) {
	messageProcessingLogObj := &MessageProcessingLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"message_processing_logs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, messageProcessingLogObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from message_processing_logs")
	}

	if err = messageProcessingLogObj.doAfterSelectHooks(ctx, exec); err != nil {
		return messageProcessingLogObj, err
	}

	return messageProcessingLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MessageProcessingLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no message_processing_logs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(messageProcessingLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	messageProcessingLogInsertCacheMut.RLock()
	cache, cached := messageProcessingLogInsertCache[key]
	messageProcessingLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			messageProcessingLogAllColumns,
			messageProcessingLogColumnsWithDefault,
			messageProcessingLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(messageProcessingLogType, messageProcessingLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(messageProcessingLogType, messageProcessingLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"message_processing_logs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"message_processing_logs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into message_processing_logs")
	}

	if !cached {
		messageProcessingLogInsertCacheMut.Lock()
		messageProcessingLogInsertCache[key] = cache
		messageProcessingLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MessageProcessingLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MessageProcessingLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	messageProcessingLogUpdateCacheMut.RLock()
	cache, cached := messageProcessingLogUpdateCache[key]
	messageProcessingLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			messageProcessingLogAllColumns,
			messageProcessingLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update message_processing_logs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"message_processing_logs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, messageProcessingLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(messageProcessingLogType, messageProcessingLogMapping, append(wl, messageProcessingLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update message_processing_logs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for message_processing_logs")
	}

	if !cached {
		messageProcessingLogUpdateCacheMut.Lock()
		messageProcessingLogUpdateCache[key] = cache
		messageProcessingLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q messageProcessingLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for message_processing_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for message_processing_logs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MessageProcessingLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), messageProcessingLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"message_processing_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, messageProcessingLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in messageProcessingLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all messageProcessingLog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MessageProcessingLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no message_processing_logs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(messageProcessingLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	messageProcessingLogUpsertCacheMut.RLock()
	cache, cached := messageProcessingLogUpsertCache[key]
	messageProcessingLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			messageProcessingLogAllColumns,
			messageProcessingLogColumnsWithDefault,
			messageProcessingLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			messageProcessingLogAllColumns,
			messageProcessingLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert message_processing_logs, could not build update column list")
		}

		ret := strmangle.SetComplement(messageProcessingLogAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(messageProcessingLogPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert message_processing_logs, could not build conflict column list")
			}

			conflict = make([]string, len(messageProcessingLogPrimaryKeyColumns))
			copy(conflict, messageProcessingLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"message_processing_logs\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(messageProcessingLogType, messageProcessingLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(messageProcessingLogType, messageProcessingLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert message_processing_logs")
	}

	if !cached {
		messageProcessingLogUpsertCacheMut.Lock()
		messageProcessingLogUpsertCache[key] = cache
		messageProcessingLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MessageProcessingLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MessageProcessingLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MessageProcessingLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), messageProcessingLogPrimaryKeyMapping)
	sql := "DELETE FROM \"message_processing_logs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from message_processing_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for message_processing_logs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q messageProcessingLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no messageProcessingLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from message_processing_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for message_processing_logs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MessageProcessingLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(messageProcessingLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), messageProcessingLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"message_processing_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, messageProcessingLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from messageProcessingLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for message_processing_logs")
	}

	if len(messageProcessingLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MessageProcessingLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMessageProcessingLog(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MessageProcessingLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MessageProcessingLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), messageProcessingLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"message_processing_logs\".* FROM \"message_processing_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, messageProcessingLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MessageProcessingLogSlice")
	}

	*o = slice

	return nil
}

// MessageProcessingLogExists checks if the MessageProcessingLog row exists.
func MessageProcessingLogExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"message_processing_logs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if message_processing_logs exists")
	}

	return exists, nil
}

// Exists checks if the MessageProcessingLog row exists.
func (o *MessageProcessingLog) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MessageProcessingLogExists(ctx, exec, o.ID)
}
