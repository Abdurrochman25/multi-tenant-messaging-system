// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDeadLetterMessages(t *testing.T) {
	t.Parallel()

	query := DeadLetterMessages()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDeadLetterMessagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeadLetterMessage{}
	if err = randomize.Struct(seed, o, deadLetterMessageDBTypes, true, deadLetterMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeadLetterMessages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeadLetterMessagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeadLetterMessage{}
	if err = randomize.Struct(seed, o, deadLetterMessageDBTypes, true, deadLetterMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DeadLetterMessages().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeadLetterMessages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeadLetterMessagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeadLetterMessage{}
	if err = randomize.Struct(seed, o, deadLetterMessageDBTypes, true, deadLetterMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeadLetterMessageSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DeadLetterMessages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDeadLetterMessagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeadLetterMessage{}
	if err = randomize.Struct(seed, o, deadLetterMessageDBTypes, true, deadLetterMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DeadLetterMessageExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DeadLetterMessage exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DeadLetterMessageExists to return true, but got false.")
	}
}

func testDeadLetterMessagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeadLetterMessage{}
	if err = randomize.Struct(seed, o, deadLetterMessageDBTypes, true, deadLetterMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	deadLetterMessageFound, err := FindDeadLetterMessage(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if deadLetterMessageFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDeadLetterMessagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeadLetterMessage{}
	if err = randomize.Struct(seed, o, deadLetterMessageDBTypes, true, deadLetterMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DeadLetterMessages().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDeadLetterMessagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeadLetterMessage{}
	if err = randomize.Struct(seed, o, deadLetterMessageDBTypes, true, deadLetterMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DeadLetterMessages().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDeadLetterMessagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	deadLetterMessageOne := &DeadLetterMessage{}
	deadLetterMessageTwo := &DeadLetterMessage{}
	if err = randomize.Struct(seed, deadLetterMessageOne, deadLetterMessageDBTypes, false, deadLetterMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}
	if err = randomize.Struct(seed, deadLetterMessageTwo, deadLetterMessageDBTypes, false, deadLetterMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deadLetterMessageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deadLetterMessageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeadLetterMessages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDeadLetterMessagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	deadLetterMessageOne := &DeadLetterMessage{}
	deadLetterMessageTwo := &DeadLetterMessage{}
	if err = randomize.Struct(seed, deadLetterMessageOne, deadLetterMessageDBTypes, false, deadLetterMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}
	if err = randomize.Struct(seed, deadLetterMessageTwo, deadLetterMessageDBTypes, false, deadLetterMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deadLetterMessageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deadLetterMessageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeadLetterMessages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func deadLetterMessageBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DeadLetterMessage) error {
	*o = DeadLetterMessage{}
	return nil
}

func deadLetterMessageAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DeadLetterMessage) error {
	*o = DeadLetterMessage{}
	return nil
}

func deadLetterMessageAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DeadLetterMessage) error {
	*o = DeadLetterMessage{}
	return nil
}

func deadLetterMessageBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DeadLetterMessage) error {
	*o = DeadLetterMessage{}
	return nil
}

func deadLetterMessageAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DeadLetterMessage) error {
	*o = DeadLetterMessage{}
	return nil
}

func deadLetterMessageBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DeadLetterMessage) error {
	*o = DeadLetterMessage{}
	return nil
}

func deadLetterMessageAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DeadLetterMessage) error {
	*o = DeadLetterMessage{}
	return nil
}

func deadLetterMessageBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DeadLetterMessage) error {
	*o = DeadLetterMessage{}
	return nil
}

func deadLetterMessageAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DeadLetterMessage) error {
	*o = DeadLetterMessage{}
	return nil
}

func testDeadLetterMessagesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DeadLetterMessage{}
	o := &DeadLetterMessage{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, deadLetterMessageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage object: %s", err)
	}

	AddDeadLetterMessageHook(boil.BeforeInsertHook, deadLetterMessageBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	deadLetterMessageBeforeInsertHooks = []DeadLetterMessageHook{}

	AddDeadLetterMessageHook(boil.AfterInsertHook, deadLetterMessageAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	deadLetterMessageAfterInsertHooks = []DeadLetterMessageHook{}

	AddDeadLetterMessageHook(boil.AfterSelectHook, deadLetterMessageAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	deadLetterMessageAfterSelectHooks = []DeadLetterMessageHook{}

	AddDeadLetterMessageHook(boil.BeforeUpdateHook, deadLetterMessageBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	deadLetterMessageBeforeUpdateHooks = []DeadLetterMessageHook{}

	AddDeadLetterMessageHook(boil.AfterUpdateHook, deadLetterMessageAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	deadLetterMessageAfterUpdateHooks = []DeadLetterMessageHook{}

	AddDeadLetterMessageHook(boil.BeforeDeleteHook, deadLetterMessageBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	deadLetterMessageBeforeDeleteHooks = []DeadLetterMessageHook{}

	AddDeadLetterMessageHook(boil.AfterDeleteHook, deadLetterMessageAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	deadLetterMessageAfterDeleteHooks = []DeadLetterMessageHook{}

	AddDeadLetterMessageHook(boil.BeforeUpsertHook, deadLetterMessageBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	deadLetterMessageBeforeUpsertHooks = []DeadLetterMessageHook{}

	AddDeadLetterMessageHook(boil.AfterUpsertHook, deadLetterMessageAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	deadLetterMessageAfterUpsertHooks = []DeadLetterMessageHook{}
}

func testDeadLetterMessagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeadLetterMessage{}
	if err = randomize.Struct(seed, o, deadLetterMessageDBTypes, true, deadLetterMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeadLetterMessages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeadLetterMessagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeadLetterMessage{}
	if err = randomize.Struct(seed, o, deadLetterMessageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(deadLetterMessagePrimaryKeyColumns, deadLetterMessageColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := DeadLetterMessages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeadLetterMessageToOneTenantUsingTenant(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DeadLetterMessage
	var foreign Tenant

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, deadLetterMessageDBTypes, false, deadLetterMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tenantDBTypes, false, tenantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tenant struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TenantID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Tenant().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddTenantHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Tenant) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DeadLetterMessageSlice{&local}
	if err = local.L.LoadTenant(ctx, tx, false, (*[]*DeadLetterMessage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tenant == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Tenant = nil
	if err = local.L.LoadTenant(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tenant == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDeadLetterMessageToOneSetOpTenantUsingTenant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DeadLetterMessage
	var b, c Tenant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, deadLetterMessageDBTypes, false, strmangle.SetComplement(deadLetterMessagePrimaryKeyColumns, deadLetterMessageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tenantDBTypes, false, strmangle.SetComplement(tenantPrimaryKeyColumns, tenantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tenant{&b, &c} {
		err = a.SetTenant(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Tenant != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DeadLetterMessages[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TenantID != x.ID {
			t.Error("foreign key was wrong value", a.TenantID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TenantID))
		reflect.Indirect(reflect.ValueOf(&a.TenantID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TenantID != x.ID {
			t.Error("foreign key was wrong value", a.TenantID, x.ID)
		}
	}
}

func testDeadLetterMessagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeadLetterMessage{}
	if err = randomize.Struct(seed, o, deadLetterMessageDBTypes, true, deadLetterMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeadLetterMessagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeadLetterMessage{}
	if err = randomize.Struct(seed, o, deadLetterMessageDBTypes, true, deadLetterMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeadLetterMessageSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDeadLetterMessagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DeadLetterMessage{}
	if err = randomize.Struct(seed, o, deadLetterMessageDBTypes, true, deadLetterMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DeadLetterMessages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	deadLetterMessageDBTypes = map[string]string{`ID`: `uuid`, `OriginalMessageID`: `uuid`, `TenantID`: `uuid`, `Payload`: `jsonb`, `FailureReason`: `text`, `RetryCount`: `integer`, `LastError`: `text`, `CreatedAt`: `timestamp with time zone`}
	_                        = bytes.MinRead
)

func testDeadLetterMessagesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(deadLetterMessagePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(deadLetterMessageAllColumns) == len(deadLetterMessagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeadLetterMessage{}
	if err = randomize.Struct(seed, o, deadLetterMessageDBTypes, true, deadLetterMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeadLetterMessages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deadLetterMessageDBTypes, true, deadLetterMessagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDeadLetterMessagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(deadLetterMessageAllColumns) == len(deadLetterMessagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DeadLetterMessage{}
	if err = randomize.Struct(seed, o, deadLetterMessageDBTypes, true, deadLetterMessageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DeadLetterMessages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deadLetterMessageDBTypes, true, deadLetterMessagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(deadLetterMessageAllColumns, deadLetterMessagePrimaryKeyColumns) {
		fields = deadLetterMessageAllColumns
	} else {
		fields = strmangle.SetComplement(
			deadLetterMessageAllColumns,
			deadLetterMessagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DeadLetterMessageSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDeadLetterMessagesUpsert(t *testing.T) {
	t.Parallel()

	if len(deadLetterMessageAllColumns) == len(deadLetterMessagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DeadLetterMessage{}
	if err = randomize.Struct(seed, &o, deadLetterMessageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeadLetterMessage: %s", err)
	}

	count, err := DeadLetterMessages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, deadLetterMessageDBTypes, false, deadLetterMessagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DeadLetterMessage struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DeadLetterMessage: %s", err)
	}

	count, err = DeadLetterMessages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
