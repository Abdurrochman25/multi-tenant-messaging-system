// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("DeadLetterMessages", testDeadLetterMessages)
	t.Run("MessageProcessingLogs", testMessageProcessingLogs)
	t.Run("Messages", testMessages)
	t.Run("TenantConfigs", testTenantConfigs)
	t.Run("Tenants", testTenants)
}

func TestDelete(t *testing.T) {
	t.Run("DeadLetterMessages", testDeadLetterMessagesDelete)
	t.Run("MessageProcessingLogs", testMessageProcessingLogsDelete)
	t.Run("Messages", testMessagesDelete)
	t.Run("TenantConfigs", testTenantConfigsDelete)
	t.Run("Tenants", testTenantsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("DeadLetterMessages", testDeadLetterMessagesQueryDeleteAll)
	t.Run("MessageProcessingLogs", testMessageProcessingLogsQueryDeleteAll)
	t.Run("Messages", testMessagesQueryDeleteAll)
	t.Run("TenantConfigs", testTenantConfigsQueryDeleteAll)
	t.Run("Tenants", testTenantsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("DeadLetterMessages", testDeadLetterMessagesSliceDeleteAll)
	t.Run("MessageProcessingLogs", testMessageProcessingLogsSliceDeleteAll)
	t.Run("Messages", testMessagesSliceDeleteAll)
	t.Run("TenantConfigs", testTenantConfigsSliceDeleteAll)
	t.Run("Tenants", testTenantsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("DeadLetterMessages", testDeadLetterMessagesExists)
	t.Run("MessageProcessingLogs", testMessageProcessingLogsExists)
	t.Run("Messages", testMessagesExists)
	t.Run("TenantConfigs", testTenantConfigsExists)
	t.Run("Tenants", testTenantsExists)
}

func TestFind(t *testing.T) {
	t.Run("DeadLetterMessages", testDeadLetterMessagesFind)
	t.Run("MessageProcessingLogs", testMessageProcessingLogsFind)
	t.Run("Messages", testMessagesFind)
	t.Run("TenantConfigs", testTenantConfigsFind)
	t.Run("Tenants", testTenantsFind)
}

func TestBind(t *testing.T) {
	t.Run("DeadLetterMessages", testDeadLetterMessagesBind)
	t.Run("MessageProcessingLogs", testMessageProcessingLogsBind)
	t.Run("Messages", testMessagesBind)
	t.Run("TenantConfigs", testTenantConfigsBind)
	t.Run("Tenants", testTenantsBind)
}

func TestOne(t *testing.T) {
	t.Run("DeadLetterMessages", testDeadLetterMessagesOne)
	t.Run("MessageProcessingLogs", testMessageProcessingLogsOne)
	t.Run("Messages", testMessagesOne)
	t.Run("TenantConfigs", testTenantConfigsOne)
	t.Run("Tenants", testTenantsOne)
}

func TestAll(t *testing.T) {
	t.Run("DeadLetterMessages", testDeadLetterMessagesAll)
	t.Run("MessageProcessingLogs", testMessageProcessingLogsAll)
	t.Run("Messages", testMessagesAll)
	t.Run("TenantConfigs", testTenantConfigsAll)
	t.Run("Tenants", testTenantsAll)
}

func TestCount(t *testing.T) {
	t.Run("DeadLetterMessages", testDeadLetterMessagesCount)
	t.Run("MessageProcessingLogs", testMessageProcessingLogsCount)
	t.Run("Messages", testMessagesCount)
	t.Run("TenantConfigs", testTenantConfigsCount)
	t.Run("Tenants", testTenantsCount)
}

func TestHooks(t *testing.T) {
	t.Run("DeadLetterMessages", testDeadLetterMessagesHooks)
	t.Run("MessageProcessingLogs", testMessageProcessingLogsHooks)
	t.Run("Messages", testMessagesHooks)
	t.Run("TenantConfigs", testTenantConfigsHooks)
	t.Run("Tenants", testTenantsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("DeadLetterMessages", testDeadLetterMessagesInsert)
	t.Run("DeadLetterMessages", testDeadLetterMessagesInsertWhitelist)
	t.Run("MessageProcessingLogs", testMessageProcessingLogsInsert)
	t.Run("MessageProcessingLogs", testMessageProcessingLogsInsertWhitelist)
	t.Run("Messages", testMessagesInsert)
	t.Run("Messages", testMessagesInsertWhitelist)
	t.Run("TenantConfigs", testTenantConfigsInsert)
	t.Run("TenantConfigs", testTenantConfigsInsertWhitelist)
	t.Run("Tenants", testTenantsInsert)
	t.Run("Tenants", testTenantsInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("DeadLetterMessages", testDeadLetterMessagesReload)
	t.Run("MessageProcessingLogs", testMessageProcessingLogsReload)
	t.Run("Messages", testMessagesReload)
	t.Run("TenantConfigs", testTenantConfigsReload)
	t.Run("Tenants", testTenantsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("DeadLetterMessages", testDeadLetterMessagesReloadAll)
	t.Run("MessageProcessingLogs", testMessageProcessingLogsReloadAll)
	t.Run("Messages", testMessagesReloadAll)
	t.Run("TenantConfigs", testTenantConfigsReloadAll)
	t.Run("Tenants", testTenantsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("DeadLetterMessages", testDeadLetterMessagesSelect)
	t.Run("MessageProcessingLogs", testMessageProcessingLogsSelect)
	t.Run("Messages", testMessagesSelect)
	t.Run("TenantConfigs", testTenantConfigsSelect)
	t.Run("Tenants", testTenantsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("DeadLetterMessages", testDeadLetterMessagesUpdate)
	t.Run("MessageProcessingLogs", testMessageProcessingLogsUpdate)
	t.Run("Messages", testMessagesUpdate)
	t.Run("TenantConfigs", testTenantConfigsUpdate)
	t.Run("Tenants", testTenantsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("DeadLetterMessages", testDeadLetterMessagesSliceUpdateAll)
	t.Run("MessageProcessingLogs", testMessageProcessingLogsSliceUpdateAll)
	t.Run("Messages", testMessagesSliceUpdateAll)
	t.Run("TenantConfigs", testTenantConfigsSliceUpdateAll)
	t.Run("Tenants", testTenantsSliceUpdateAll)
}
